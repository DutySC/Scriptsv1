import telebot, requests, os, re, glob
from telebot import types

bot = telebot.TeleBot('6149957194:AAHvsUnLJPLMWzxHPUQik6dhqxRSZziuV0w')
requests.get('https://t.me/@TestMapInChatBot')

groups = [1158889635, -1001742179859]  # chat id
dict = {'–ü—Ä–∏–º–æ—Ä—å—è': 'https://192.168.233.171:25443/', '–ù–°–û': 'http://192.168.233.169:3980/',
        '–†–æ—Å—Ç–æ–≤–∞': 'http://192.168.233.98:61027/', '–ö—É—Ä—Å–∫–∞': 'http://192.168.234.14:7280/',
        '–°–∞—Ö–∞–ª–∏–Ω–∞': 'http://192.168.233.170:8080/', '–•–∞–±–∞—Ä–æ–≤—Å–∫–∞': 'http://192.168.233.222:2780/',
        '–ê–ª–∞–Ω–∏–∏': 'http://192.168.234.31:1580/'}

@bot.message_handler(func=lambda message: message.chat.id not in groups)
def some(message):
    bot.send_message(message.chat.id, '–î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω')

def remove_pic(name):
    try:
        os.remove("".join(glob.glob('./Results/'+name+'/*')))
    except Exception:
        pass

def send_pic(message, name):
    try:
        a = open('./Results/'+name+'/–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.png', 'rb')
        bot.send_photo(message.chat.id, a)
    except Exception:
        pass
    try:
        b = open('./Results/'+name+'/–î–Ω–µ–≤–Ω–∏–∫.png', 'rb')
        bot.send_photo(message.chat.id, b)
    except Exception:
        pass
    try:
        c = open('./Results/'+name+'/–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ.png', 'rb')
        bot.send_photo(message.chat.id, c)
    except Exception:
        pass
    try:
        d = open('./Results/'+name+'/–ì–æ—Å–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—è.png', 'rb')
        bot.send_photo(message.chat.id, d)
    except Exception:
        pass
    try:
        i = open('./Results/'+name+'/–ü–æ–∏—Å–∫.png', 'rb')
        bot.send_photo(message.chat.id, i)
    except Exception:
        pass

def autotest_prod(message, test_name, address):
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="üî¥–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ <a href='"+address+"'>"'<u><b>'+test_name+'</b></u>'"</a>", parse_mode='html')
    remove_pic('Results_sc')
    os.system('pytest --testit -s '+test_name+'.py > Results/Results.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ test.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
    with open('Results/Results.log', 'r', -1, 'utf-8') as fi:
        f = fi.read()[245:1028]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        opt_1 = re.sub(r'\s[.]', '\n', f)  # —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≤ –ª–æ–≥–∞—Ö
        opt_2 = re.sub(r'\D[=]', ' ', opt_1)  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
        opt_3 = re.sub(r'\D[=]', ' ', opt_2)
    bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="üü¢–ó–∞–∫–æ–Ω—á–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ <a href='"+address+"'><u><b>"+test_name+"üîΩ</b></u></a>", parse_mode='html')
    bot.send_message(message.chat.id, opt_3)
    send_pic(message, 'Results_sc')

@bot.message_handler(commands=["start"])
def any_msg(message):
    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton(text="–ü—Ä–∏–º–æ—Ä—Å–∫–∏–π –∫—Ä–∞–π", callback_data="–ü—Ä–∏–º–æ—Ä—å—è")
    btn2 = types.InlineKeyboardButton(text="–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="–ù–°–û")
    btn3 = types.InlineKeyboardButton(text="–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="–†–æ—Å—Ç–æ–≤–∞")
    btn4 = types.InlineKeyboardButton(text="–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", callback_data="–ö—É—Ä—Å–∫–∞")
    btn5 = types.InlineKeyboardButton(text="–†–°–û-–ê–ª–∞–Ω–∏—è", callback_data="–ê–ª–∞–Ω–∏–∏")
    markup.add(btn1)
    markup.add(btn2)
    markup.add(btn3)
    markup.add(btn4)
    markup.add(btn5)
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–≥–∏–æ–Ω/–æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞, –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\n–∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ —Å–µ—Ä–≤–∏—Å–∞ - –ú–ò–°", reply_markup=markup)

@bot.message_handler(commands=["help"])
def help_msg(message):
    bot.send_message(message.chat.id, '<b>–ü—Ä–∞–≤–∏–ª–∞ –ø–æ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ –±–æ—Ç–∞:\n * –Ω–µ–ª—å–∑—è –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤ –ø–æ–¥—Ä—è–¥\n * –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –≤–æ –≤—Ä–µ–º—è —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏/—Ç–µ—Å—Ç–æ–≤–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ - —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å/—Ç–µ—Å—Ç–æ–≤–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞**\n * –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º —Ç–æ–ª—å–∫–æ –≤ —á–∞—Ç–µ - "PROD AUTO-TEST (DutySC)"\n * –≤ —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –æ–±—Ä–∞—â–∞—Ç—å—Å—è —á–µ—Ä–µ–∑ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"\n\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ - –ê—Ö—Ç—è–º–æ–≤ –¢–∏–º—É—Ä (@ELCUY)\n–†—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –æ—Ç–¥–µ–ª–∞ - –ì—Ä–∏–≥–æ—Ä–∏–π –ï—Ñ—Ä–µ–º–æ–≤ (@greegree)</b>', parse_mode='html')


@bot.callback_query_handler(func=lambda call: True)
def callback_inline_1(call):
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞ —Å –±–æ—Ç–æ–º
    if call.message:
        if call.data == call.data:
            autotest_prod(call.message, test_name=call.data, address=dict[call.data])
        else:
            print('–ù–µ –∏–º–µ–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞')
            pass


# #–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
# @bot.message_handler(commands=["start","help"])
# def welcome(message):
#     hello = bot.send_message(message.chat.id,"–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é –≤–∞—Å –º–µ–Ω—è –∑–æ–≤—É—Ç –ë–æ—Ç!")
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     mrk = types.KeyboardButton("–ö–∞—Ç–∞–ª–æ–≥", callback_data='katalog')
#     mrk1 = types.KeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞", callback_data='cart')
#     markup.add(mrk,mrk1)
#     bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –º–µ–Ω—é,—á—Ç–æ –≤–∞–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ", reply_markup=markup)
# @bot.callback_query_handler(func=lambda call: True)
# def answer(call):
#     if call.data == 'katalog':
#     markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     mar = types.KeyboardButton("–û–¥–µ–∂–¥–∞", callback_data=odezda)
#     mar2 = types.KeyboardButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=back)
#     markup1.add(mar,mar2)
#     bot.send_message(message.chat.id,"–í—ã–±–µ—Ä–∏—Ç–µ,—á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ,–µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' ",reply_markup=markup1)
#     elif call.data == 'cart':
#         # –ß—Ç–æ —Ç–æ
#     elif call.data == 'back':
#         bot.send_message(message.chat.id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é",reply_markup=None)

# @bot.message_handler(commands=['start'])
# def start(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#     btn1 = types.KeyboardButton('–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')
#     btn2 = types.KeyboardButton('–ù–µ, –ø–æ–ø–æ–∑–∂–µ')
#     markup.add(btn1, btn2)
#     bot.send_message(message.chat.id, f'ü§öüèª–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name} {message.from_user.last_name}</b>, —Å—Ç–∞—Ä—Ç—É–µ–º?)', parse_mode='html', reply_markup=markup)

# @bot.message_handler(content_types=['text'])
# def get_text_messages(message):
#     if message.text == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É':
#         markup = types.ReplyKeyboardMarkup(resize_keyboard=True) #—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
#         btn1 = types.KeyboardButton('–¢–µ—Å—Ç –ü—Ä–∏–º–æ—Ä—å—è')
#         btn2 = types.KeyboardButton('–¢–µ—Å—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞')
#         btn3 = types.KeyboardButton('–¢–µ—Å—Ç –ö—É—Ä—Å–∫–∞')
#         btn4 = types.KeyboardButton('–¢–µ—Å—Ç –†–æ—Å—Ç–æ–≤–∞')
#         btn5 = types.KeyboardButton('Coming soon')
#         # btn3 = types.KeyboardButton('Coming soon')
#         markup.add(btn1, btn2, btn3, btn4, btn5)
#         bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –†–µ–≥–∏–æ–Ω', reply_markup=markup) #–æ—Ç–≤–µ—Ç –±–æ—Ç–∞
#
#     elif message.text == '–ù–µ, –ø–æ–ø–æ–∑–∂–µ':
#         bot.send_message(message.chat.id, '–¢–æ–≥–¥–∞ –∏–¥–∏ —Ä–∞–±–æ—Ç–∞–π) –∏–ª–∏ –º–æ–∂–µ—Ç...', parse_mode='Markdown')
# ########################################################################################################################
#     elif message.text == '–¢–µ—Å—Ç –ü—Ä–∏–º–æ—Ä—å—è':
#         remove_pic('PK_sc')
#         bot.send_message(message.chat.id, 'üî¥–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ü—Ä–∏–º–æ—Ä—å—è üîΩ')
#         os.system('pytest -s –ü—Ä–∏–º–æ—Ä—å—è.py > Results/PK.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ü—Ä–∏–º–æ—Ä—å—è.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
#         with open('Results/PK.log', 'r', -1, 'utf-8') as fi:
#             f = fi.read()[186:1100]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
#             opt_1 = re.sub(r'\s[.]', '\n', f) #—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –≤ –ª–æ–≥–∞—Ö
#             opt_2 = re.sub(r'\D[=]', '', opt_1)  # —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
#             opt_3 = re.sub(r'\D[=]', '', opt_2)
#         bot.send_message(message.chat.id, opt_3)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         send_pic(message, 'PK_sc')
# ########################################################################################################################
#     elif message.text == '–¢–µ—Å—Ç –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞':
#         remove_pic('NSO_sc')
#         bot.send_message(message.chat.id, 'üî¥–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ù–°–û üîΩ')
#         os.system('pytest -s –ù–°–û.py > Results/NSO.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ù–°–û.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
#         with open('Results/NSO.log', 'r', -1, 'utf-8') as fi:
#             f = fi.read()[186:1100]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
#             opt_1 = re.sub(r'\s[.]', '\n', f)
#             opt_2 = re.sub(r'\D[=]', '', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
#             opt_3 = re.sub(r'\D[=]', '', opt_2)
#         bot.send_message(message.chat.id, opt_3)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         send_pic(message, 'NSO_sc')
# ########################################################################################################################
#     elif message.text == '–¢–µ—Å—Ç –ö—É—Ä—Å–∫–∞':
#         remove_pic('KURO_sc')
#         bot.send_message(message.chat.id, 'üî¥–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –ö—É—Ä—Å–∫–∞ üîΩ')
#         os.system('pytest -s –ö—É—Ä—Å–∫–∞.py > Results/KURO.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ö—É—Ä—Å–∫–∞.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
#         with open('Results/KURO.log', 'r', -1, 'utf-8') as fi:
#             f = fi.read()[186:1100]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
#             opt_1 = re.sub(r'\s[.]', '\n', f)
#             opt_2 = re.sub(r'\D[=]', '', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
#             opt_3 = re.sub(r'\D[=]', '', opt_2)
#         bot.send_message(message.chat.id, opt_3)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         send_pic(message, 'KURO_sc')
# ########################################################################################################################
#     elif message.text == '–¢–µ—Å—Ç –†–æ—Å—Ç–æ–≤–∞':
#         remove_pic('RO_sc')
#         bot.send_message(message.chat.id, 'üî¥–ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç. –º–æ–¥—É–ª–µ–π –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ–≥–æ —Å—Ç–µ–Ω–¥–∞ - –†–æ—Å—Ç–æ–≤–∞ üîΩ')
#         os.system('pytest -s –†–æ—Å—Ç–æ–≤–∞.py > Results/RO.log')  # –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞ –†–æ—Å—Ç–æ–≤–∞.py –∏ –∑–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ —Ñ–∞–π–ª logs.txt
#         with open('Results/RO.log', 'r', -1, 'utf-8') as fi:
#             f = fi.read()[186:1100]  # –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
#             opt_1 = re.sub(r'\s[.]', '\n', f)
#             opt_2 = re.sub(r'\D[=]', '', opt_1) #—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ—á–∫–∏
#             opt_3 = re.sub(r'\D[=]', '', opt_2)
#         bot.send_message(message.chat.id, opt_3)  # –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
#         send_pic(message, 'RO_sc')
# ########################################################################################################################
#     elif message.text == 'Coming soon':
#         bot.send_message(message.chat.id, '–î–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤', parse_mode='Markdown')

    # elif message.text == '–ë—É–¥—É—â–∏–µ —Å—Ç–µ–Ω–¥—ã':
    #     bot.send_message(message.from_user.id, '–ë—É–¥—É—â–∏–µ —Å—Ç–µ–Ω–¥—ã', parse_mode='Markdown')

# bot.polling(none_stop=True, interval=0)
bot.infinity_polling(none_stop=True)
# bot.polling(none_stop=True, timeout=123)